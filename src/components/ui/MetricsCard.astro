---
interface Props {
  title: string;
  description: string;
  stats: Array<{
    number: string;
    label: string;
    suffix?: string;
  }>;
  variant?: 'default' | 'google' | 'minimal';
}

const { title, description, stats, variant = 'default' } = Astro.props as Props;

const variantStyles = {
  default: 'bg-gradient-to-br from-white/90 to-gray-50/80',
  google: 'bg-gradient-to-br from-blue-50/90 via-red-50/50 to-yellow-50/90',
  minimal: 'bg-white/60 backdrop-blur-xl'
};
---

<div class={`relative overflow-hidden rounded-3xl ${variantStyles[variant]} border border-gray-200/50 p-8 md:p-12 shadow-lg hover:shadow-2xl transition-all duration-700 group`}>
  
  <!-- Google accent dots -->
  {variant === 'google' && (
    <div class="absolute top-6 right-6 flex gap-1.5">
      <div class="w-3 h-3 bg-blue-400 rounded-full opacity-60 group-hover:opacity-100 transition-opacity"></div>
      <div class="w-3 h-3 bg-red-400 rounded-full opacity-60 group-hover:opacity-100 transition-opacity delay-75"></div>
      <div class="w-3 h-3 bg-yellow-400 rounded-full opacity-60 group-hover:opacity-100 transition-opacity delay-150"></div>
      <div class="w-3 h-3 bg-green-400 rounded-full opacity-60 group-hover:opacity-100 transition-opacity delay-225"></div>
    </div>
  )}

  <!-- Header -->
  <div class="mb-10">
    <h3 class="text-3xl md:text-4xl font-black text-gray-900 mb-4 group-hover:bg-gradient-to-r group-hover:from-blue-600 group-hover:to-purple-600 group-hover:bg-clip-text group-hover:text-transparent transition-all duration-500">
      {title}
    </h3>
    <p class="text-gray-600 text-lg leading-relaxed">{description}</p>
  </div>

  <!-- Stats Grid -->
  <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
    {stats.map((stat, index) => {
      const colors = ['blue', 'purple', 'pink', 'green'] as const;
      const color = colors[index % colors.length];

      const bgFrom = {
        blue: 'from-blue-100', purple: 'from-purple-100', pink: 'from-pink-100', green: 'from-green-100'
      }[color];
      const bgTo = {
        blue: 'to-blue-200', purple: 'to-purple-200', pink: 'to-pink-200', green: 'to-green-200'
      }[color];
      const hoverFrom = {
        blue: 'group-hover/stat:from-blue-500', purple: 'group-hover/stat:from-purple-500', pink: 'group-hover/stat:from-pink-500', green: 'group-hover/stat:from-green-500'
      }[color];
      const hoverTo = {
        blue: 'group-hover/stat:to-blue-600', purple: 'group-hover/stat:to-purple-600', pink: 'group-hover/stat:to-pink-600', green: 'group-hover/stat:to-green-600'
      }[color];
      const textColor = {
        blue: 'text-blue-600', purple: 'text-purple-600', pink: 'text-pink-600', green: 'text-green-600'
      }[color];
      const textHover = {
        blue: 'group-hover/stat:text-blue-700', purple: 'group-hover/stat:text-purple-700', pink: 'group-hover/stat:text-pink-700', green: 'group-hover/stat:text-green-700'
      }[color];

      return (
        <div class="text-center group/stat">
          <div class:list={["mb-4 mx-auto w-20 h-20 bg-gradient-to-r rounded-2xl flex items-center justify-center transition-all duration-300", bgFrom, bgTo, hoverFrom, hoverTo]}>
            <span class:list={["text-2xl font-black transition-colors counter-animate", textColor, 'group-hover/stat:text-white']} data-target={stat.number}>
              0{stat.suffix || ''}
            </span>
          </div>
          <p class:list={["text-sm font-semibold transition-colors", textColor, textHover]}>
            {stat.label}
          </p>
        </div>
      );
    })}
  </div>

  <!-- LÃ­nea decorativa minimalista -->
  <div class="absolute bottom-0 left-0 w-full h-0.5 bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 opacity-40 group-hover:opacity-80 transition-opacity"></div>

  <!-- Pattern de fondo sutil -->
  <div class="absolute inset-0 opacity-5 pointer-events-none">
    <div class="w-full h-full" style="background-image: radial-gradient(circle, #6366f1 1px, transparent 1px); background-size: 30px 30px;"></div>
  </div>
</div>

<script>
// Counter animation
document.addEventListener('DOMContentLoaded', () => {
  const counters = document.querySelectorAll('.counter-animate');
  
  const animateCounter = (counter: Element) => {
    const targetAttr = counter.getAttribute('data-target') || '0';
    const target = parseInt(targetAttr);
    const currentText = counter.textContent || '';
    const suffix = currentText.replace(/\d+/, '');
    let current = 0;
    const increment = target / 50;
    
    const updateCounter = () => {
      if (current < target) {
        current += increment;
        counter.textContent = Math.ceil(current) + suffix;
        requestAnimationFrame(updateCounter);
      } else {
        counter.textContent = target + suffix;
      }
    };
    
    updateCounter();
  };

  // Intersection Observer para activar cuando sea visible
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const counter = entry.target;
        animateCounter(counter);
        observer.unobserve(counter);
      }
    });
  });

  counters.forEach(counter => observer.observe(counter));
});
</script>
